# This is a basic workflow to help you get started with Actions

name: spatialite android build

env:
  NDK_VERSION: r28
  API: 28
# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      target:
        type: choice
        options:
        - x86_64-linux-android
        - arm64-v8a
  # push:
  #   branches:
  #     - main
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: nttld/setup-ndk@v1
        name: setup NDK
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          add-to-path: true

      - name: build
        run: |
          export TARGET=${{ github.event.inputs.target }}
          export BUILD="/home/runner/build-${TARGET}"
          export NDK=/opt/hostedtoolcache/ndk/${{ env.NDK_VERSION }}/x64
          export TOOLCHAIN=${NDK}/toolchains/llvm/prebuilt/linux-x86_64
          export API=${{ env.API }}
          export AR=$TOOLCHAIN/bin/llvm-ar
          export CC="$TOOLCHAIN/bin/clang --target=$TARGET$API"
          export AS=$CC
          export CXX="$TOOLCHAIN/bin/clang++ --target=$TARGET$API"
          export LD=$TOOLCHAIN/bin/ld
          export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN/bin/llvm-strip

          export CFLAGS="${CFLAGS} -I${BUILD}/include/"
          export LDFLAGS="${LDFLAGS} -L${BUILD}/lib/ -lm"
          export CXXFLAGS="${CXXFLAGS} -I${BUILD}/include/"
          sudo apt install -y autotools-dev autoconf libtool

          echo Build LIBSQLITE3
          wget -q https://www.sqlite.org/2025/sqlite-src-3500000.zip
          unzip -q sqlite-src-3500000.zip
          cd sqlite-src-3500000
          ./configure --prefix=${BUILD}
          make install
          cd ..


          wget -q  https://download.osgeo.org/libtiff/tiff-4.7.0.zip
          unzip tiff-4.7.0.zip
          cd tiff-4.7.0
          ./autogen.sh --host=${TARGET}
          ./configure --host=${TARGET} --prefix=${BUILD} --with-sysroot=${NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          make install
          cd ..

          wget -q https://download.osgeo.org/proj/proj-5.0.0.tar.gz
          tar xzf proj-5.0.0.tar.gz
          cd proj-5.0.0
          ./configure --host=${TARGET} --prefix=${BUILD} --with-sysroot=${NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot --without-mutex
          make install
          #mkdir build
          cd ../

          
          echo == BUILD LIBICONV ==
          wget -q https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.18.tar.gz
          tar xzf libiconv-1.18.tar.gz
          cd libiconv-1.18
          ./configure --host=${TARGET} --prefix=${BUILD} --with-sysroot=${NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          make install
          cd ..

          echo == BUILD LIBXML2 ==
          wget -q https://gitlab.gnome.org/GNOME/libxml2/-/archive/v2.14.3/libxml2-v2.14.3.tar.gz
          tar xzf libxml2-v2.14.3.tar.gz
          cd libxml2-v2.14.3
          echo == autogen.sh ==
          ./autogen.sh  --host=${TARGET}
          echo == configure ==
          ./configure --host=${TARGET} --prefix=${BUILD} --without-python --with-http --with-sysroot=${NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          make install
          cd ..

          echo == Build GEOS ==
          wget -q https://download.osgeo.org/geos/geos-3.13.1.tar.bz2
          bzip2 -d < geos-3.13.1.tar.bz2 | tar xf -
          patch geos-3.13.1/CMakeLists.txt < geos-CMakeLists.txt.patch
          cd geos-3.13.1
          cmake -DCMAKE_INSTALL_PREFIX=${BUILD} -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF .
          make install
          cd ..

          echo Build LIBTROPO
          wget -q https://github.com/CGX-GROUP/librttopo/archive/refs/tags/librttopo-1.1.0.tar.gz
          tar xzf librttopo-1.1.0.tar.gz
          cd librttopo-librttopo-1.1.0
          ./autogen.sh
          ./configure --host=${TARGET} --with-geosconfig=${BUILD}/bin/geos-config --prefix=${BUILD}
          make install
          cd ..          
          
          echo
          echo +---------------------+
          echo | Build LIBSPATIALITE |
          echo +---------------------+
          export SQLITE3_CFLAGS="-I${BUILD}/include/"
          export SQLITE3_LIBS="-L${BUILD}/lib"
          export LIBXML2_CFLAGS="-I${BUILD}/include/libxml2"
          export LIBXML2_LIBS="-L${BUILD}/lib"
          export LDFLAGS="${LDFLAGS} -lproj -llog"
          wget -q https://www.gaia-gis.it/gaia-sins/libspatialite-sources/libspatialite-5.1.0.tar.gz
          tar xzf libspatialite-5.1.0.tar.gz
          cd libspatialite-5.1.0
          # note --host not x86_64-linux-android but x86_64-android-linux
          ./configure --prefix=${BUILD} --enable-freexl=no --enable-minizip=no --enable-module-only \
          --enable-libxml2=no --enable-iconv=no --enable-examples=no \
          --build=x86_64-unknown-linux-gnu --host=x86_64-android-linux --with-geosconfig=${BUILD}/bin/geos-config \
          --with-sysroot=${NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot --target=android
          make install
          cp ${NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/${TARGET}/${API}/liblog.so ${BUILD}/lib
          cp ${NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/${TARGET}/libc++_shared.so ${BUILD}/lib
          rm -rf ${BUILD}/lib/*a ${BUILD}/lib/pkgconfig ${BUILD}/lib/cmake ${BUILD}/lib/*.so.[0-9]* ${BUILD}/lib/libsqlite3.*
          ls ${BUILD}/lib

      - name: publish
        uses: actions/upload-artifact@v4
        with:
          path: /home/runner/build-x86_64-linux-android/lib/
          name: mod_spatialite_android
